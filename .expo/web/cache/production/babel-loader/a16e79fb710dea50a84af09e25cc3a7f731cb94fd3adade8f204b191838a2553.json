{"ast":null,"code":"import{Platform,UnavailabilityError}from'expo-modules-core';import NotificationPermissionsModule from'./NotificationPermissionsModule';export async function getPermissionsAsync(){if(!NotificationPermissionsModule.getPermissionsAsync){throw new UnavailabilityError('Notifications','getPermissionsAsync');}return await NotificationPermissionsModule.getPermissionsAsync();}export async function requestPermissionsAsync(permissions){if(!NotificationPermissionsModule.requestPermissionsAsync){throw new UnavailabilityError('Notifications','requestPermissionsAsync');}const requestedPermissions=permissions??{ios:{allowAlert:true,allowBadge:true,allowSound:true}};const requestedPlatformPermissions=requestedPermissions[\"web\"];return await NotificationPermissionsModule.requestPermissionsAsync(requestedPlatformPermissions);}","map":{"version":3,"names":["Platform","UnavailabilityError","NotificationPermissionsModule","getPermissionsAsync","requestPermissionsAsync","permissions","requestedPermissions","ios","allowAlert","allowBadge","allowSound","requestedPlatformPermissions"],"sources":["/Users/adhithyasobhanan/MY FINIX-APP/FRONTEND/node_modules/expo-notifications/src/NotificationPermissions.ts"],"sourcesContent":["import { Platform, UnavailabilityError } from 'expo-modules-core';\n\nimport { NotificationPermissionsRequest } from './NotificationPermissions.types';\nimport NotificationPermissionsModule from './NotificationPermissionsModule';\n\n/**\n * Calling this function checks current permissions settings related to notifications.\n * It lets you verify whether the app is currently allowed to display alerts, play sounds, etc.\n * There is no user-facing effect of calling this.\n * @return It returns a `Promise` resolving to an object represents permission settings ([`NotificationPermissionsStatus`](#notificationpermissionsstatus)).\n * On iOS, make sure you [properly interpret the permissions response](#interpret-the-ios-permissions-response).\n * @example Check if the app is allowed to send any type of notifications (interrupting and non-interruptingâ€“provisional on iOS).\n * ```ts\n * import * as Notifications from 'expo-notifications';\n *\n * export async function allowsNotificationsAsync() {\n *   const settings = await Notifications.getPermissionsAsync();\n *   return (\n *     settings.granted || settings.ios?.status === Notifications.IosAuthorizationStatus.PROVISIONAL\n *   );\n * }\n * ```\n * @header permissions\n */\nexport async function getPermissionsAsync() {\n  if (!NotificationPermissionsModule.getPermissionsAsync) {\n    throw new UnavailabilityError('Notifications', 'getPermissionsAsync');\n  }\n\n  return await NotificationPermissionsModule.getPermissionsAsync();\n}\n\n/**\n * Prompts the user for notification permissions according to request. **Request defaults to asking the user to allow displaying alerts,\n * setting badge count and playing sounds**.\n * @param permissions An object representing configuration for the request scope.\n * @return It returns a Promise resolving to an object represents permission settings ([`NotificationPermissionsStatus`](#notificationpermissionsstatus)).\n * On iOS, make sure you [properly interpret the permissions response](#interpret-the-ios-permissions-response).\n * @example Prompts the user to allow the app to show alerts, play sounds, set badge count and let Siri read out messages through AirPods.\n * ```ts\n * import * as Notifications from 'expo-notifications';\n *\n * export function requestPermissionsAsync() {\n *   return await Notifications.requestPermissionsAsync({\n *     ios: {\n *       allowAlert: true,\n *       allowBadge: true,\n *       allowSound: true,\n *     },\n *   });\n * }\n * ```\n * @header permissions\n */\nexport async function requestPermissionsAsync(permissions?: NotificationPermissionsRequest) {\n  if (!NotificationPermissionsModule.requestPermissionsAsync) {\n    throw new UnavailabilityError('Notifications', 'requestPermissionsAsync');\n  }\n\n  const requestedPermissions = permissions ?? {\n    ios: {\n      allowAlert: true,\n      allowBadge: true,\n      allowSound: true,\n    },\n  };\n  const requestedPlatformPermissions = requestedPermissions[Platform.OS];\n  return await NotificationPermissionsModule.requestPermissionsAsync(requestedPlatformPermissions);\n}\n"],"mappings":"AAAA,OAASA,QAAQ,CAAEC,mBAAmB,KAAQ,mBAAmB,CAGjE,MAAO,CAAAC,6BAA6B,KAAM,iCAAiC,CAqB3E,MAAO,eAAe,CAAAC,mBAAmBA,CAAA,EACvC,GAAI,CAACD,6BAA6B,CAACC,mBAAmB,CAAE,CACtD,KAAM,IAAI,CAAAF,mBAAmB,CAAC,eAAe,CAAE,qBAAqB,CAAC,C,CAGvE,MAAO,MAAM,CAAAC,6BAA6B,CAACC,mBAAmB,EAAE,CAClE,CAwBA,MAAO,eAAe,CAAAC,uBAAuBA,CAACC,WAA4C,EACxF,GAAI,CAACH,6BAA6B,CAACE,uBAAuB,CAAE,CAC1D,KAAM,IAAI,CAAAH,mBAAmB,CAAC,eAAe,CAAE,yBAAyB,CAAC,C,CAG3E,KAAM,CAAAK,oBAAoB,CAAGD,WAAW,EAAI,CAC1CE,GAAG,CAAE,CACHC,UAAU,CAAE,IAAI,CAChBC,UAAU,CAAE,IAAI,CAChBC,UAAU,CAAE,I,EAEf,CACD,KAAM,CAAAC,4BAA4B,CAAGL,oBAAoB,OAAa,CACtE,MAAO,MAAM,CAAAJ,6BAA6B,CAACE,uBAAuB,CAACO,4BAA4B,CAAC,CAClG","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}