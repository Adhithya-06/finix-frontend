{"ast":null,"code":"import'abort-controller/polyfill';import{UnavailabilityError}from'expo-modules-core';import ServerRegistrationModule from'./ServerRegistrationModule';import{addPushTokenListener}from'./TokenEmitter';import getDevicePushTokenAsync from'./getDevicePushTokenAsync';import{updateDevicePushTokenAsync as updateDevicePushTokenAsyncWithSignal}from'./utils/updateDevicePushTokenAsync';let lastAbortController=null;async function updatePushTokenAsync(token){lastAbortController?.abort();lastAbortController=new AbortController();return await updateDevicePushTokenAsyncWithSignal(lastAbortController.signal,token);}export async function setAutoServerRegistrationEnabledAsync(enabled){lastAbortController?.abort();if(!ServerRegistrationModule.setRegistrationInfoAsync){throw new UnavailabilityError('ServerRegistrationModule','setRegistrationInfoAsync');}await ServerRegistrationModule.setRegistrationInfoAsync(enabled?JSON.stringify({isEnabled:enabled}):null);}export async function __handlePersistedRegistrationInfoAsync(registrationInfo){if(!registrationInfo){return;}let registration=null;try{registration=JSON.parse(registrationInfo);}catch(e){console.warn('[expo-notifications] Error encountered while fetching registration information for auto token updates.',e);}if(!registration?.isEnabled){return;}try{const latestDevicePushToken=await getDevicePushTokenAsync();await updatePushTokenAsync(latestDevicePushToken);}catch(e){console.warn('[expo-notifications] Error encountered while updating server registration with latest device push token.',e);}}if(ServerRegistrationModule.getRegistrationInfoAsync){addPushTokenListener(async token=>{try{const registrationInfo=await ServerRegistrationModule.getRegistrationInfoAsync();if(!registrationInfo){return;}const registration=JSON.parse(registrationInfo);if(registration?.isEnabled){await updatePushTokenAsync(token);}}catch(e){console.warn('[expo-notifications] Error encountered while updating server registration with latest device push token.',e);}});ServerRegistrationModule.getRegistrationInfoAsync().then(__handlePersistedRegistrationInfoAsync);}else{console.warn(`[expo-notifications] Error encountered while fetching auto-registration state, new tokens will not be automatically registered on server.`,new UnavailabilityError('ServerRegistrationModule','getRegistrationInfoAsync'));}","map":{"version":3,"names":["UnavailabilityError","ServerRegistrationModule","addPushTokenListener","getDevicePushTokenAsync","updateDevicePushTokenAsync","updateDevicePushTokenAsyncWithSignal","lastAbortController","updatePushTokenAsync","token","abort","AbortController","signal","setAutoServerRegistrationEnabledAsync","enabled","setRegistrationInfoAsync","JSON","stringify","isEnabled","__handlePersistedRegistrationInfoAsync","registrationInfo","registration","parse","e","console","warn","latestDevicePushToken","getRegistrationInfoAsync","then"],"sources":["/Users/adhithyasobhanan/MY FINIX-APP/FRONTEND/node_modules/expo-notifications/src/DevicePushTokenAutoRegistration.fx.ts"],"sourcesContent":["import 'abort-controller/polyfill';\nimport { UnavailabilityError } from 'expo-modules-core';\n\nimport ServerRegistrationModule from './ServerRegistrationModule';\nimport { addPushTokenListener } from './TokenEmitter';\nimport { DevicePushToken } from './Tokens.types';\nimport getDevicePushTokenAsync from './getDevicePushTokenAsync';\nimport { updateDevicePushTokenAsync as updateDevicePushTokenAsyncWithSignal } from './utils/updateDevicePushTokenAsync';\n\nlet lastAbortController: AbortController | null = null;\nasync function updatePushTokenAsync(token: DevicePushToken) {\n  // Abort current update process\n  lastAbortController?.abort();\n  lastAbortController = new AbortController();\n  return await updateDevicePushTokenAsyncWithSignal(lastAbortController.signal, token);\n}\n\n/**\n * Encapsulates device server registration data\n */\nexport type DevicePushTokenRegistration = {\n  isEnabled: boolean;\n};\n\n/**\n * @hidden - the comment is misleading and the purpose of the function needs to be reevaluated\n *\n * Sets the registration information so that the device push token gets pushed\n * to the given registration endpoint\n * @param enabled\n */\nexport async function setAutoServerRegistrationEnabledAsync(enabled: boolean) {\n  // We are overwriting registration, so we shouldn't let\n  // any pending request complete.\n  lastAbortController?.abort();\n\n  if (!ServerRegistrationModule.setRegistrationInfoAsync) {\n    throw new UnavailabilityError('ServerRegistrationModule', 'setRegistrationInfoAsync');\n  }\n\n  await ServerRegistrationModule.setRegistrationInfoAsync(\n    enabled ? JSON.stringify({ isEnabled: enabled }) : null\n  );\n}\n\n// note(Chmiela): This function is exported only for testing purposes.\nexport async function __handlePersistedRegistrationInfoAsync(\n  registrationInfo: string | null | undefined\n) {\n  if (!registrationInfo) {\n    // No registration info, nothing to do\n    return;\n  }\n\n  let registration: DevicePushTokenRegistration | null = null;\n  try {\n    registration = JSON.parse(registrationInfo);\n  } catch (e) {\n    console.warn(\n      '[expo-notifications] Error encountered while fetching registration information for auto token updates.',\n      e\n    );\n  }\n\n  if (!registration?.isEnabled) {\n    // Registration is invalid or not enabled, nothing more to do\n    return;\n  }\n\n  try {\n    // Since the registration is enabled, fetching a \"new\" device token\n    // shouldn't be a problem.\n    const latestDevicePushToken = await getDevicePushTokenAsync();\n    await updatePushTokenAsync(latestDevicePushToken);\n  } catch (e) {\n    console.warn(\n      '[expo-notifications] Error encountered while updating server registration with latest device push token.',\n      e\n    );\n  }\n}\n\nif (ServerRegistrationModule.getRegistrationInfoAsync) {\n  // A global scope (to get all the updates) device push token\n  // subscription, never cleared.\n  addPushTokenListener(async (token) => {\n    try {\n      // Before updating the push token on server we always check if we should\n      // Since modules can't change their method availability while running, we\n      // can assert it's defined.\n      const registrationInfo = await ServerRegistrationModule.getRegistrationInfoAsync!();\n\n      if (!registrationInfo) {\n        // Registration is not enabled\n        return;\n      }\n\n      const registration: DevicePushTokenRegistration | null = JSON.parse(registrationInfo);\n      if (registration?.isEnabled) {\n        // Dispatch an abortable task to update\n        // registration with new token.\n        await updatePushTokenAsync(token);\n      }\n    } catch (e) {\n      console.warn(\n        '[expo-notifications] Error encountered while updating server registration with latest device push token.',\n        e\n      );\n    }\n  });\n\n  // Verify if persisted registration\n  // has successfully uploaded last known\n  // device push token. If not, retry.\n  ServerRegistrationModule.getRegistrationInfoAsync().then(__handlePersistedRegistrationInfoAsync);\n} else {\n  console.warn(\n    `[expo-notifications] Error encountered while fetching auto-registration state, new tokens will not be automatically registered on server.`,\n    new UnavailabilityError('ServerRegistrationModule', 'getRegistrationInfoAsync')\n  );\n}\n"],"mappings":"AAAA,MAAO,2BAA2B,CAClC,OAASA,mBAAmB,KAAQ,mBAAmB,CAEvD,MAAO,CAAAC,wBAAwB,KAAM,4BAA4B,CACjE,OAASC,oBAAoB,KAAQ,gBAAgB,CAErD,MAAO,CAAAC,uBAAuB,KAAM,2BAA2B,CAC/D,OAASC,0BAA0B,GAAI,CAAAC,oCAAoC,KAAQ,oCAAoC,CAEvH,GAAI,CAAAC,mBAAmB,CAA2B,IAAI,CACtD,cAAe,CAAAC,oBAAoBA,CAACC,KAAsB,EAExDF,mBAAmB,EAAEG,KAAK,EAAE,CAC5BH,mBAAmB,CAAG,GAAI,CAAAI,eAAe,EAAE,CAC3C,MAAO,MAAM,CAAAL,oCAAoC,CAACC,mBAAmB,CAACK,MAAM,CAAEH,KAAK,CAAC,CACtF,CAgBA,MAAO,eAAe,CAAAI,qCAAqCA,CAACC,OAAgB,EAG1EP,mBAAmB,EAAEG,KAAK,EAAE,CAE5B,GAAI,CAACR,wBAAwB,CAACa,wBAAwB,CAAE,CACtD,KAAM,IAAI,CAAAd,mBAAmB,CAAC,0BAA0B,CAAE,0BAA0B,CAAC,C,CAGvF,KAAM,CAAAC,wBAAwB,CAACa,wBAAwB,CACrDD,OAAO,CAAGE,IAAI,CAACC,SAAS,CAAC,CAAEC,SAAS,CAAEJ,OAAO,CAAE,CAAC,CAAG,IAAI,CACxD,CACH,CAGA,MAAO,eAAe,CAAAK,sCAAsCA,CAC1DC,gBAA2C,EAE3C,GAAI,CAACA,gBAAgB,CAAE,CAErB,O,CAGF,GAAI,CAAAC,YAAY,CAAuC,IAAI,CAC3D,GAAI,CACFA,YAAY,CAAGL,IAAI,CAACM,KAAK,CAACF,gBAAgB,CAAC,C,CAC3C,MAAOG,CAAC,CAAE,CACVC,OAAO,CAACC,IAAI,CACV,wGAAwG,CACxGF,CAAC,CACF,C,CAGH,GAAI,CAACF,YAAY,EAAEH,SAAS,CAAE,CAE5B,O,CAGF,GAAI,CAGF,KAAM,CAAAQ,qBAAqB,CAAG,KAAM,CAAAtB,uBAAuB,EAAE,CAC7D,KAAM,CAAAI,oBAAoB,CAACkB,qBAAqB,CAAC,C,CACjD,MAAOH,CAAC,CAAE,CACVC,OAAO,CAACC,IAAI,CACV,0GAA0G,CAC1GF,CAAC,CACF,C,CAEL,CAEA,GAAIrB,wBAAwB,CAACyB,wBAAwB,CAAE,CAGrDxB,oBAAoB,CAAC,KAAO,CAAAM,KAAK,EAAI,CACnC,GAAI,CAIF,KAAM,CAAAW,gBAAgB,CAAG,KAAM,CAAAlB,wBAAwB,CAACyB,wBAAyB,EAAE,CAEnF,GAAI,CAACP,gBAAgB,CAAE,CAErB,O,CAGF,KAAM,CAAAC,YAAY,CAAuCL,IAAI,CAACM,KAAK,CAACF,gBAAgB,CAAC,CACrF,GAAIC,YAAY,EAAEH,SAAS,CAAE,CAG3B,KAAM,CAAAV,oBAAoB,CAACC,KAAK,CAAC,C,EAEnC,MAAOc,CAAC,CAAE,CACVC,OAAO,CAACC,IAAI,CACV,0GAA0G,CAC1GF,CAAC,CACF,C,CAEL,CAAC,CAAC,CAKFrB,wBAAwB,CAACyB,wBAAwB,EAAE,CAACC,IAAI,CAACT,sCAAsC,CAAC,C,CACjG,IAAM,CACLK,OAAO,CAACC,IAAI,CACV,2IAA2I,CAC3I,GAAI,CAAAxB,mBAAmB,CAAC,0BAA0B,CAAE,0BAA0B,CAAC,CAChF,C","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}