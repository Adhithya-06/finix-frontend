{"ast":null,"code":"export const mapNotificationResponse=response=>{return Object.assign({},response,{notification:mapNotification(response.notification)});};export const mapNotification=notification=>Object.assign({},notification,{request:mapNotificationRequest(notification.request)});export const mapNotificationRequest=request=>Object.assign({},request,{content:mapNotificationContent(request.content)});export const mapNotificationContent=content=>{const mappedContent=Object.assign({},content);try{const dataString=mappedContent['dataString'];if(typeof dataString==='string'){mappedContent.data=JSON.parse(dataString);delete mappedContent.dataString;}}catch(e){console.log(`Error in notification: ${e}`);}return mappedContent;};","map":{"version":3,"names":["mapNotificationResponse","response","Object","assign","notification","mapNotification","request","mapNotificationRequest","content","mapNotificationContent","mappedContent","dataString","data","JSON","parse","e","console","log"],"sources":["/Users/adhithyasobhanan/MY FINIX-APP/FRONTEND/node_modules/expo-notifications/src/utils/mapNotificationResponse.ts"],"sourcesContent":["import {\n  Notification,\n  NotificationContent,\n  NotificationRequest,\n  NotificationResponse,\n} from '../Notifications.types';\n\n/**\n * @hidden\n *\n * Does any required processing of a notification response from native code\n * before it is passed to a notification response listener, or to the\n * last notification response hook.\n *\n * @param response The raw response passed in from native code\n * @returns the mapped response.\n */\nexport const mapNotificationResponse = (response: NotificationResponse) => {\n  return {\n    ...response,\n    notification: mapNotification(response.notification),\n  };\n};\n\n/**\n * @hidden\n *\n * Does any required processing of a notification from native code\n * before it is passed to a notification listener.\n *\n * @param notification The raw notification passed in from native code\n * @returns the mapped notification.\n */\nexport const mapNotification = (notification: Notification) => ({\n  ...notification,\n  request: mapNotificationRequest(notification.request),\n});\n\n/**\n * @hidden\n *\n * Does any required processing of a notification request from native code\n * before it is passed to other JS code.\n *\n * @param request The raw request passed in from native code\n * @returns the mapped request.\n */\nexport const mapNotificationRequest = (request: NotificationRequest) => ({\n  ...request,\n  content: mapNotificationContent(request.content),\n});\n\n/**\n * @hidden\n * Does any required processing of notification content from native code\n * before being passed to other JS code.\n *\n * @param content The raw content passed in from native code\n * @returns the mapped content.\n */\nexport const mapNotificationContent = (content: NotificationContent) => {\n  const mappedContent: NotificationContent & { dataString?: string } = { ...content };\n  try {\n    const dataString = mappedContent['dataString'];\n    if (typeof dataString === 'string') {\n      mappedContent.data = JSON.parse(dataString);\n      delete mappedContent.dataString;\n    }\n  } catch (e: any) {\n    console.log(`Error in notification: ${e}`);\n  }\n  return mappedContent;\n};\n"],"mappings":"AAiBA,MAAO,MAAM,CAAAA,uBAAuB,CAAIC,QAA8B,EAAI,CACxE,OAAAC,MAAA,CAAAC,MAAA,IACKF,QAAQ,EACXG,YAAY,CAAEC,eAAe,CAACJ,QAAQ,CAACG,YAAY,CAAC,GAExD,CAAC,CAWD,MAAO,MAAM,CAAAC,eAAe,CAAID,YAA0B,EAAAF,MAAA,CAAAC,MAAA,IACrDC,YAAY,EACfE,OAAO,CAAEC,sBAAsB,CAACH,YAAY,CAACE,OAAO,CAAC,EACrD,CAWF,MAAO,MAAM,CAAAC,sBAAsB,CAAID,OAA4B,EAAAJ,MAAA,CAAAC,MAAA,IAC9DG,OAAO,EACVE,OAAO,CAAEC,sBAAsB,CAACH,OAAO,CAACE,OAAO,CAAC,EAChD,CAUF,MAAO,MAAM,CAAAC,sBAAsB,CAAID,OAA4B,EAAI,CACrE,KAAM,CAAAE,aAAa,CAAAR,MAAA,CAAAC,MAAA,IAAuDK,OAAO,CAAE,CACnF,GAAI,CACF,KAAM,CAAAG,UAAU,CAAGD,aAAa,CAAC,YAAY,CAAC,CAC9C,GAAI,MAAO,CAAAC,UAAU,GAAK,QAAQ,CAAE,CAClCD,aAAa,CAACE,IAAI,CAAGC,IAAI,CAACC,KAAK,CAACH,UAAU,CAAC,CAC3C,MAAO,CAAAD,aAAa,CAACC,UAAU,C,EAEjC,MAAOI,CAAM,CAAE,CACfC,OAAO,CAACC,GAAG,CAAC,0BAA0BF,CAAC,EAAE,CAAC,C,CAE5C,MAAO,CAAAL,aAAa,CACtB,CAAC","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}