{"ast":null,"code":"import{useLayoutEffect,useState}from'react';import{addNotificationResponseReceivedListener,addNotificationResponseClearedListener,getLastNotificationResponseAsync}from'./NotificationsEmitter';export default function useLastNotificationResponse(){const[lastNotificationResponse,setLastNotificationResponse]=useState(undefined);const newResponseIfNeeded=(prevResponse,newResponse)=>{if(!newResponse){return prevResponse;}if(!prevResponse){return newResponse;}return prevResponse.notification.request.identifier!==newResponse.notification.request.identifier?newResponse:prevResponse;};useLayoutEffect(()=>{getLastNotificationResponseAsync?.().then(response=>setLastNotificationResponse(prevResponse=>newResponseIfNeeded(prevResponse,response)));const subscription=addNotificationResponseReceivedListener(response=>setLastNotificationResponse(prevResponse=>newResponseIfNeeded(prevResponse,response)));const clearResponseSubscription=addNotificationResponseClearedListener(()=>{setLastNotificationResponse(undefined);});return()=>{subscription.remove();clearResponseSubscription.remove();};},[]);return lastNotificationResponse;}","map":{"version":3,"names":["useLayoutEffect","useState","addNotificationResponseReceivedListener","addNotificationResponseClearedListener","getLastNotificationResponseAsync","useLastNotificationResponse","lastNotificationResponse","setLastNotificationResponse","undefined","newResponseIfNeeded","prevResponse","newResponse","notification","request","identifier","then","response","subscription","clearResponseSubscription","remove"],"sources":["/Users/adhithyasobhanan/MY FINIX-APP/FRONTEND/node_modules/expo-notifications/src/useLastNotificationResponse.ts"],"sourcesContent":["import { useLayoutEffect, useState } from 'react';\n\nimport { MaybeNotificationResponse } from './Notifications.types';\nimport {\n  addNotificationResponseReceivedListener,\n  addNotificationResponseClearedListener,\n  getLastNotificationResponseAsync,\n} from './NotificationsEmitter';\n\n/**\n * A React hook which returns the notification response that was received most recently\n * (a notification response designates an interaction with a notification, such as tapping on it).\n *\n * To clear the last notification response, use [`clearLastNotificationResponseAsync()`](#notificationsclearlastnotificationresponseasync).\n *\n * > If you don't want to use a hook, you can use `Notifications.getLastNotificationResponseAsync()` instead.\n *\n * @return The hook may return one of these three types/values:\n * - `undefined` - until we're sure of what to return,\n * - `null` - if no notification response has been received yet,\n * - a [`NotificationResponse`](#notificationresponse) object - if a notification response was received.\n *\n * @example\n * Responding to a notification tap by opening a URL that could be put into the notification's `data`\n * (opening the URL is your responsibility and is not a part of the `expo-notifications` API):\n * ```jsx\n * import * as Notifications from 'expo-notifications';\n * import { Linking } from 'react-native';\n *\n * export default function App() {\n *   const lastNotificationResponse = Notifications.useLastNotificationResponse();\n *   React.useEffect(() => {\n *     if (\n *       lastNotificationResponse &&\n *       lastNotificationResponse.notification.request.content.data.url &&\n *       lastNotificationResponse.actionIdentifier === Notifications.DEFAULT_ACTION_IDENTIFIER\n *     ) {\n *       Linking.openURL(lastNotificationResponse.notification.request.content.data.url);\n *     }\n *   }, [lastNotificationResponse]);\n *   return (\n *     // Your app content\n *   );\n * }\n * ```\n * @header listen\n */\nexport default function useLastNotificationResponse() {\n  const [lastNotificationResponse, setLastNotificationResponse] =\n    useState<MaybeNotificationResponse>(undefined);\n\n  // Pure function that returns the new response if it is different from the previous,\n  // otherwise return the previous response\n  const newResponseIfNeeded = (\n    prevResponse: MaybeNotificationResponse,\n    newResponse: MaybeNotificationResponse\n  ) => {\n    // If the new response is undefined or null, no need for update\n    if (!newResponse) {\n      return prevResponse;\n    }\n    // If the previous response is undefined or null and the new response is not, we should update\n    if (!prevResponse) {\n      return newResponse;\n    }\n    return prevResponse.notification.request.identifier !==\n      newResponse.notification.request.identifier\n      ? newResponse\n      : prevResponse;\n  };\n\n  // useLayoutEffect ensures the listener is registered as soon as possible\n  useLayoutEffect(() => {\n    // Get the last response first, in case it was set earlier (even in native code on startup)\n    // before this renders\n    getLastNotificationResponseAsync?.().then((response) =>\n      setLastNotificationResponse((prevResponse) => newResponseIfNeeded(prevResponse, response))\n    );\n\n    // Set up listener for responses that come in, and set the last response if needed\n    const subscription = addNotificationResponseReceivedListener((response) =>\n      setLastNotificationResponse((prevResponse) => newResponseIfNeeded(prevResponse, response))\n    );\n    const clearResponseSubscription = addNotificationResponseClearedListener(() => {\n      setLastNotificationResponse(undefined);\n    });\n    return () => {\n      subscription.remove();\n      clearResponseSubscription.remove();\n    };\n  }, []);\n\n  return lastNotificationResponse;\n}\n"],"mappings":"AAAA,OAASA,eAAe,CAAEC,QAAQ,KAAQ,OAAO,CAGjD,OACEC,uCAAuC,CACvCC,sCAAsC,CACtCC,gCAAgC,KAC3B,wBAAwB,CAwC/B,cAAc,SAAU,CAAAC,2BAA2BA,CAAA,EACjD,KAAM,CAACC,wBAAwB,CAAEC,2BAA2B,CAAC,CAC3DN,QAAQ,CAA4BO,SAAS,CAAC,CAIhD,KAAM,CAAAC,mBAAmB,CAAGA,CAC1BC,YAAuC,CACvCC,WAAsC,GACpC,CAEF,GAAI,CAACA,WAAW,CAAE,CAChB,MAAO,CAAAD,YAAY,C,CAGrB,GAAI,CAACA,YAAY,CAAE,CACjB,MAAO,CAAAC,WAAW,C,CAEpB,MAAO,CAAAD,YAAY,CAACE,YAAY,CAACC,OAAO,CAACC,UAAU,GACjDH,WAAW,CAACC,YAAY,CAACC,OAAO,CAACC,UAAU,CACzCH,WAAW,CACXD,YAAY,CAClB,CAAC,CAGDV,eAAe,CAAC,IAAK,CAGnBI,gCAAgC,GAAE,CAAE,CAACW,IAAI,CAAEC,QAAQ,EACjDT,2BAA2B,CAAEG,YAAY,EAAKD,mBAAmB,CAACC,YAAY,CAAEM,QAAQ,CAAC,CAAC,CAC3F,CAGD,KAAM,CAAAC,YAAY,CAAGf,uCAAuC,CAAEc,QAAQ,EACpET,2BAA2B,CAAEG,YAAY,EAAKD,mBAAmB,CAACC,YAAY,CAAEM,QAAQ,CAAC,CAAC,CAC3F,CACD,KAAM,CAAAE,yBAAyB,CAAGf,sCAAsC,CAAC,IAAK,CAC5EI,2BAA2B,CAACC,SAAS,CAAC,CACxC,CAAC,CAAC,CACF,MAAO,IAAK,CACVS,YAAY,CAACE,MAAM,EAAE,CACrBD,yBAAyB,CAACC,MAAM,EAAE,CACpC,CAAC,CACH,CAAC,CAAE,EAAE,CAAC,CAEN,MAAO,CAAAb,wBAAwB,CACjC","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}