{"ast":null,"code":"import React from'react';import Animated from\"react-native-web/dist/exports/Animated\";import Dimensions from\"react-native-web/dist/exports/Dimensions\";import{useLogger}from'../contexts';import{usePanResponder,useSlideAnimation,useViewDimensions}from'../hooks';import{noop}from'../utils/func';import{bound}from'../utils/number';import{getTestId}from'../utils/test-id';import{styles}from'./AnimatedContainer.styles';import{jsx as _jsx}from\"react/jsx-runtime\";export function dampingFor(gesture,position){const{moveY}=gesture;switch(position){case'bottom':{const{height:screenHeight}=Dimensions.get('screen');return Math.abs(screenHeight-moveY);}case'top':return Math.abs(moveY);default:throw new Error(`Toast position: ${position} not implemented`);}}export function animatedValueFor(gesture,position,damping){const boundValue=val=>bound(val,0,2);const{dy}=gesture;switch(position){case'bottom':return boundValue(1-dy/damping);case'top':return boundValue(1+dy/damping);default:throw new Error(`Toast position: ${position} not implemented`);}}export function AnimatedContainer({children,isVisible,position,topOffset,bottomOffset,keyboardOffset,onHide,onRestorePosition=noop,swipeable}){const{log}=useLogger();const{computeViewDimensions,height}=useViewDimensions();const{animatedValue,animate,animationStyles}=useSlideAnimation({position,height,topOffset,bottomOffset,keyboardOffset});const onDismiss=React.useCallback(()=>{log('Swipe, dismissing');animate(0);onHide();},[animate,log,onHide]);const onRestore=React.useCallback(()=>{log('Swipe, restoring to original position');animate(1);onRestorePosition();},[animate,log,onRestorePosition]);const computeNewAnimatedValueForGesture=React.useCallback(gesture=>{const damping=dampingFor(gesture,position);const newAnimatedValue=animatedValueFor(gesture,position,damping);return newAnimatedValue;},[position]);const{panResponder}=usePanResponder({animatedValue,computeNewAnimatedValueForGesture,onDismiss,onRestore,disable:!swipeable});React.useLayoutEffect(()=>{const newAnimationValue=isVisible?1:0;animate(newAnimationValue);},[animate,isVisible]);return _jsx(Animated.View,Object.assign({testID:getTestId('AnimatedContainer'),onLayout:computeViewDimensions,style:[styles.base,styles[position],animationStyles],pointerEvents:isVisible?'box-none':'none'},panResponder.panHandlers,{children:children}));}","map":{"version":3,"names":["React","Animated","Dimensions","useLogger","usePanResponder","useSlideAnimation","useViewDimensions","noop","bound","getTestId","styles","jsx","_jsx","dampingFor","gesture","position","moveY","height","screenHeight","get","Math","abs","Error","animatedValueFor","damping","boundValue","val","dy","AnimatedContainer","children","isVisible","topOffset","bottomOffset","keyboardOffset","onHide","onRestorePosition","swipeable","log","computeViewDimensions","animatedValue","animate","animationStyles","onDismiss","useCallback","onRestore","computeNewAnimatedValueForGesture","newAnimatedValue","panResponder","disable","useLayoutEffect","newAnimationValue","View","Object","assign","testID","onLayout","style","base","pointerEvents","panHandlers"],"sources":["/Users/adhithyasobhanan/MY FINIX-APP/FRONTEND/node_modules/react-native-toast-message/lib/src/components/AnimatedContainer.js"],"sourcesContent":["import React from 'react';\nimport { Animated, Dimensions } from 'react-native';\nimport { useLogger } from '../contexts';\nimport { usePanResponder, useSlideAnimation, useViewDimensions } from '../hooks';\nimport { noop } from '../utils/func';\nimport { bound } from '../utils/number';\nimport { getTestId } from '../utils/test-id';\nimport { styles } from './AnimatedContainer.styles';\n/**\n * Produces a positive damping value.\n *\n * To note: `moveY` becomes negative when going off-screen. By making sure the value\n * produced is always positive, we avoid issues like: https://github.com/calintamas/react-native-toast-message/issues/280\n */\nexport function dampingFor(gesture, position) {\n    const { moveY } = gesture;\n    switch (position) {\n        case 'bottom': {\n            const { height: screenHeight } = Dimensions.get('screen');\n            return Math.abs(screenHeight - moveY);\n        }\n        case 'top':\n            return Math.abs(moveY);\n        default:\n            throw new Error(`Toast position: ${position} not implemented`);\n    }\n}\nexport function animatedValueFor(gesture, position, damping) {\n    const boundValue = (val) => bound(val, 0, 2);\n    const { dy } = gesture;\n    switch (position) {\n        case 'bottom':\n            return boundValue(1 - dy / damping);\n        case 'top':\n            return boundValue(1 + dy / damping);\n        default:\n            throw new Error(`Toast position: ${position} not implemented`);\n    }\n}\nexport function AnimatedContainer({ children, isVisible, position, topOffset, bottomOffset, keyboardOffset, onHide, onRestorePosition = noop, swipeable }) {\n    const { log } = useLogger();\n    const { computeViewDimensions, height } = useViewDimensions();\n    const { animatedValue, animate, animationStyles } = useSlideAnimation({\n        position,\n        height,\n        topOffset,\n        bottomOffset,\n        keyboardOffset\n    });\n    const onDismiss = React.useCallback(() => {\n        log('Swipe, dismissing');\n        animate(0);\n        onHide();\n    }, [animate, log, onHide]);\n    const onRestore = React.useCallback(() => {\n        log('Swipe, restoring to original position');\n        animate(1);\n        onRestorePosition();\n    }, [animate, log, onRestorePosition]);\n    const computeNewAnimatedValueForGesture = React.useCallback((gesture) => {\n        const damping = dampingFor(gesture, position);\n        const newAnimatedValue = animatedValueFor(gesture, position, damping);\n        return newAnimatedValue;\n    }, [position]);\n    const { panResponder } = usePanResponder({\n        animatedValue,\n        computeNewAnimatedValueForGesture,\n        onDismiss,\n        onRestore,\n        disable: !swipeable\n    });\n    React.useLayoutEffect(() => {\n        const newAnimationValue = isVisible ? 1 : 0;\n        animate(newAnimationValue);\n    }, [animate, isVisible]);\n    return (<Animated.View testID={getTestId('AnimatedContainer')} onLayout={computeViewDimensions} style={[styles.base, styles[position], animationStyles]} \n    // This container View is never the target of touch events but its subviews can be.\n    // By doing this, tapping buttons behind the Toast is allowed\n    pointerEvents={isVisible ? 'box-none' : 'none'} {...panResponder.panHandlers}>\n      {children}\n    </Animated.View>);\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}