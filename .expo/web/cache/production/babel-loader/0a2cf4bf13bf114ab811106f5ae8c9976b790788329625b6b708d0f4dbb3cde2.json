{"ast":null,"code":"\"use strict\";import*as React from'react';class FakeSharedValue{_listeners=new Map();constructor(value){this._value=value;}addListener(id,listener){this._listeners.set(id,listener);}removeListener(id){this._listeners.delete(id);}modify(modifier){this.value=modifier!==undefined?modifier(this.value):this.value;}get(){return this.value;}set(value){this.value=value;}set value(value){this._value=value;for(const listener of this._listeners.values()){listener(value);}}get value(){return this._value;}_isReanimatedSharedValue=true;}export function useFakeSharedValue(value){const sharedValue=React.useRef(null);if(sharedValue.current===null){sharedValue.current=new FakeSharedValue(value);}return sharedValue.current;}","map":{"version":3,"names":["React","FakeSharedValue","_listeners","Map","constructor","value","_value","addListener","id","listener","set","removeListener","delete","modify","modifier","undefined","get","values","_isReanimatedSharedValue","useFakeSharedValue","sharedValue","useRef","current"],"sources":["/Users/adhithyasobhanan/MY FINIX-APP/FRONTEND/node_modules/react-native-drawer-layout/src/utils/useFakeSharedValue.tsx"],"sourcesContent":["import * as React from 'react';\n\nclass FakeSharedValue {\n  _listeners = new Map<number, (value: number) => void>();\n  _value: number;\n\n  constructor(value: number) {\n    this._value = value;\n  }\n\n  addListener(id: number, listener: (value: number) => void) {\n    this._listeners.set(id, listener);\n  }\n\n  removeListener(id: number) {\n    this._listeners.delete(id);\n  }\n\n  modify(modifier?: (value: number) => number) {\n    this.value = modifier !== undefined ? modifier(this.value) : this.value;\n  }\n\n  get() {\n    return this.value;\n  }\n\n  set(value: number) {\n    this.value = value;\n  }\n\n  set value(value: number) {\n    this._value = value;\n\n    for (const listener of this._listeners.values()) {\n      listener(value);\n    }\n  }\n\n  get value() {\n    return this._value;\n  }\n\n  _isReanimatedSharedValue = true;\n}\n\n/**\n * Compatibility layer for `useDrawerProgress` with `react-native-reanimated`\n */\nexport function useFakeSharedValue(value: number): FakeSharedValue {\n  const sharedValue = React.useRef<FakeSharedValue | null>(null);\n\n  if (sharedValue.current === null) {\n    sharedValue.current = new FakeSharedValue(value);\n  }\n\n  return sharedValue.current;\n}\n"],"mappings":"aAAA,MAAO,GAAK,CAAAA,KAAK,KAAM,OAAO,CAE9B,KAAM,CAAAC,eAAgB,CACpBC,UAAU,CAAG,GAAI,CAAAC,GAAG,CAAkC,CAAC,CAGvDC,WAAWA,CAACC,KAAa,CAAE,CACzB,IAAI,CAACC,MAAM,CAAGD,KAAK,CACrB,CAEAE,WAAWA,CAACC,EAAU,CAAEC,QAAiC,CAAE,CACzD,IAAI,CAACP,UAAU,CAACQ,GAAG,CAACF,EAAE,CAAEC,QAAQ,CAAC,CACnC,CAEAE,cAAcA,CAACH,EAAU,CAAE,CACzB,IAAI,CAACN,UAAU,CAACU,MAAM,CAACJ,EAAE,CAAC,CAC5B,CAEAK,MAAMA,CAACC,QAAoC,CAAE,CAC3C,IAAI,CAACT,KAAK,CAAGS,QAAQ,GAAKC,SAAS,CAAGD,QAAQ,CAAC,IAAI,CAACT,KAAK,CAAC,CAAG,IAAI,CAACA,KAAK,CACzE,CAEAW,GAAGA,CAAA,CAAG,CACJ,MAAO,KAAI,CAACX,KAAK,CACnB,CAEAK,GAAGA,CAACL,KAAa,CAAE,CACjB,IAAI,CAACA,KAAK,CAAGA,KAAK,CACpB,CAEA,GAAI,CAAAA,KAAKA,CAACA,KAAa,CAAE,CACvB,IAAI,CAACC,MAAM,CAAGD,KAAK,CAEnB,IAAK,KAAM,CAAAI,QAAQ,GAAI,KAAI,CAACP,UAAU,CAACe,MAAM,CAAC,CAAC,CAAE,CAC/CR,QAAQ,CAACJ,KAAK,CAAC,CACjB,CACF,CAEA,GAAI,CAAAA,KAAKA,CAAA,CAAG,CACV,MAAO,KAAI,CAACC,MAAM,CACpB,CAEAY,wBAAwB,CAAG,IAAI,CACjC,CAKA,MAAO,SAAS,CAAAC,kBAAkBA,CAACd,KAAa,CAAmB,CACjE,KAAM,CAAAe,WAAW,CAAGpB,KAAK,CAACqB,MAAM,CAAyB,IAAI,CAAC,CAE9D,GAAID,WAAW,CAACE,OAAO,GAAK,IAAI,CAAE,CAChCF,WAAW,CAACE,OAAO,CAAG,GAAI,CAAArB,eAAe,CAACI,KAAK,CAAC,CAClD,CAEA,MAAO,CAAAe,WAAW,CAACE,OAAO,CAC5B","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}