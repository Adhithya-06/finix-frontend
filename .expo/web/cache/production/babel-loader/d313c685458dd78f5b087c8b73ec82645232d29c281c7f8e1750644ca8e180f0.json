{"ast":null,"code":"import{LegacyEventEmitter,CodedError,UnavailabilityError}from'expo-modules-core';import NotificationsHandlerModule from'./NotificationsHandlerModule';export class NotificationTimeoutError extends CodedError{constructor(notificationId,notification){super('ERR_NOTIFICATION_TIMEOUT',`Notification handling timed out for ID ${notificationId}.`);this.info={id:notificationId,notification};}}const notificationEmitter=new LegacyEventEmitter(NotificationsHandlerModule);const handleNotificationEventName='onHandleNotification';const handleNotificationTimeoutEventName='onHandleNotificationTimeout';let handleSubscription=null;let handleTimeoutSubscription=null;export function setNotificationHandler(handler){if(handleSubscription){handleSubscription.remove();handleSubscription=null;}if(handleTimeoutSubscription){handleTimeoutSubscription.remove();handleTimeoutSubscription=null;}if(handler){handleSubscription=notificationEmitter.addListener(handleNotificationEventName,async({id,notification})=>{if(!NotificationsHandlerModule.handleNotificationAsync){handler.handleError?.(id,new UnavailabilityError('Notifications','handleNotificationAsync'));return;}try{const behavior=await handler.handleNotification(notification);await NotificationsHandlerModule.handleNotificationAsync(id,behavior);handler.handleSuccess?.(id);}catch(error){handler.handleError?.(id,error);}});handleTimeoutSubscription=notificationEmitter.addListener(handleNotificationTimeoutEventName,({id,notification})=>handler.handleError?.(id,new NotificationTimeoutError(id,notification)));}}","map":{"version":3,"names":["LegacyEventEmitter","CodedError","UnavailabilityError","NotificationsHandlerModule","NotificationTimeoutError","constructor","notificationId","notification","info","id","notificationEmitter","handleNotificationEventName","handleNotificationTimeoutEventName","handleSubscription","handleTimeoutSubscription","setNotificationHandler","handler","remove","addListener","handleNotificationAsync","handleError","behavior","handleNotification","handleSuccess","error"],"sources":["/Users/adhithyasobhanan/MY FINIX-APP/FRONTEND/node_modules/expo-notifications/src/NotificationsHandler.ts"],"sourcesContent":["import {\n  LegacyEventEmitter,\n  type EventSubscription,\n  CodedError,\n  UnavailabilityError,\n} from 'expo-modules-core';\n\nimport { Notification, NotificationBehavior } from './Notifications.types';\nimport NotificationsHandlerModule from './NotificationsHandlerModule';\n\n/**\n * @hidden\n */\nexport class NotificationTimeoutError extends CodedError {\n  info: { notification: Notification; id: string };\n  constructor(notificationId: string, notification: Notification) {\n    super('ERR_NOTIFICATION_TIMEOUT', `Notification handling timed out for ID ${notificationId}.`);\n    this.info = { id: notificationId, notification };\n  }\n}\n\n// @docsMissing\nexport type NotificationHandlingError = NotificationTimeoutError | Error;\n\nexport interface NotificationHandler {\n  /**\n   * A function accepting an incoming notification returning a `Promise` resolving to a behavior ([`NotificationBehavior`](#notificationbehavior))\n   * applicable to the notification\n   * @param notification An object representing the notification.\n   */\n  handleNotification: (notification: Notification) => Promise<NotificationBehavior>;\n  /**\n   * A function called whenever an incoming notification is handled successfully.\n   * @param notificationId Identifier of the notification.\n   */\n  handleSuccess?: (notificationId: string) => void;\n  /**\n   * A function called whenever calling `handleNotification()` for an incoming notification fails.\n   * @param notificationId Identifier of the notification.\n   * @param error An error which occurred in form of `NotificationHandlingError` object.\n   */\n  handleError?: (notificationId: string, error: NotificationHandlingError) => void;\n}\n\ntype HandleNotificationEvent = {\n  id: string;\n  notification: Notification;\n};\n\ntype HandleNotificationTimeoutEvent = HandleNotificationEvent;\n\n// Web uses SyntheticEventEmitter\nconst notificationEmitter = new LegacyEventEmitter(NotificationsHandlerModule);\n\nconst handleNotificationEventName = 'onHandleNotification';\nconst handleNotificationTimeoutEventName = 'onHandleNotificationTimeout';\n\nlet handleSubscription: EventSubscription | null = null;\nlet handleTimeoutSubscription: EventSubscription | null = null;\n\n/**\n * When a notification is received while the app is running, using this function you can set a callback that will decide\n * whether the notification should be shown to the user or not.\n *\n * When a notification is received, `handleNotification` is called with the incoming notification as an argument.\n * The function should respond with a behavior object within 3 seconds, otherwise, the notification will be discarded.\n * If the notification is handled successfully, `handleSuccess` is called with the identifier of the notification,\n * otherwise (or on timeout) `handleError` will be called.\n *\n * The default behavior when the handler is not set or does not respond in time is not to show the notification.\n * @param handler A single parameter which should be either `null` (if you want to clear the handler) or a [`NotificationHandler`](#notificationhandler) object.\n *\n * @example Implementing a notification handler that always shows the notification when it is received.\n * ```jsx\n * import * as Notifications from 'expo-notifications';\n *\n * Notifications.setNotificationHandler({\n *   handleNotification: async () => ({\n *     shouldShowAlert: true,\n *     shouldPlaySound: false,\n *     shouldSetBadge: false,\n *   }),\n * });\n * ```\n * @header inForeground\n */\nexport function setNotificationHandler(handler: NotificationHandler | null): void {\n  if (handleSubscription) {\n    handleSubscription.remove();\n    handleSubscription = null;\n  }\n  if (handleTimeoutSubscription) {\n    handleTimeoutSubscription.remove();\n    handleTimeoutSubscription = null;\n  }\n\n  if (handler) {\n    handleSubscription = notificationEmitter.addListener<HandleNotificationEvent>(\n      handleNotificationEventName,\n      async ({ id, notification }) => {\n        if (!NotificationsHandlerModule.handleNotificationAsync) {\n          handler.handleError?.(\n            id,\n            new UnavailabilityError('Notifications', 'handleNotificationAsync')\n          );\n          return;\n        }\n\n        try {\n          const behavior = await handler.handleNotification(notification);\n          await NotificationsHandlerModule.handleNotificationAsync(id, behavior);\n          handler.handleSuccess?.(id);\n        } catch (error) {\n          handler.handleError?.(id, error);\n        }\n      }\n    );\n\n    handleTimeoutSubscription = notificationEmitter.addListener<HandleNotificationTimeoutEvent>(\n      handleNotificationTimeoutEventName,\n      ({ id, notification }) =>\n        handler.handleError?.(id, new NotificationTimeoutError(id, notification))\n    );\n  }\n}\n"],"mappings":"AAAA,OACEA,kBAAkB,CAElBC,UAAU,CACVC,mBAAmB,KACd,mBAAmB,CAG1B,MAAO,CAAAC,0BAA0B,KAAM,8BAA8B,CAKrE,MAAM,MAAO,CAAAC,wBAAyB,QAAQ,CAAAH,UAAU,CAEtDI,YAAYC,cAAsB,CAAEC,YAA0B,EAC5D,KAAK,CAAC,0BAA0B,CAAE,0CAA0CD,cAAc,GAAG,CAAC,CAC9F,IAAI,CAACE,IAAI,CAAG,CAAEC,EAAE,CAAEH,cAAc,CAAEC,YAAY,CAAE,CAClD,C,CAkCF,KAAM,CAAAG,mBAAmB,CAAG,GAAI,CAAAV,kBAAkB,CAACG,0BAA0B,CAAC,CAE9E,KAAM,CAAAQ,2BAA2B,CAAG,sBAAsB,CAC1D,KAAM,CAAAC,kCAAkC,CAAG,6BAA6B,CAExE,GAAI,CAAAC,kBAAkB,CAA6B,IAAI,CACvD,GAAI,CAAAC,yBAAyB,CAA6B,IAAI,CA4B9D,MAAM,SAAU,CAAAC,sBAAsBA,CAACC,OAAmC,EACxE,GAAIH,kBAAkB,CAAE,CACtBA,kBAAkB,CAACI,MAAM,EAAE,CAC3BJ,kBAAkB,CAAG,IAAI,C,CAE3B,GAAIC,yBAAyB,CAAE,CAC7BA,yBAAyB,CAACG,MAAM,EAAE,CAClCH,yBAAyB,CAAG,IAAI,C,CAGlC,GAAIE,OAAO,CAAE,CACXH,kBAAkB,CAAGH,mBAAmB,CAACQ,WAAW,CAClDP,2BAA2B,CAC3B,MAAO,CAAEF,EAAE,CAAEF,YAAY,CAAE,GAAI,CAC7B,GAAI,CAACJ,0BAA0B,CAACgB,uBAAuB,CAAE,CACvDH,OAAO,CAACI,WAAW,GACjBX,EAAE,CACF,GAAI,CAAAP,mBAAmB,CAAC,eAAe,CAAE,yBAAyB,CAAC,CACpE,CACD,O,CAGF,GAAI,CACF,KAAM,CAAAmB,QAAQ,CAAG,KAAM,CAAAL,OAAO,CAACM,kBAAkB,CAACf,YAAY,CAAC,CAC/D,KAAM,CAAAJ,0BAA0B,CAACgB,uBAAuB,CAACV,EAAE,CAAEY,QAAQ,CAAC,CACtEL,OAAO,CAACO,aAAa,GAAGd,EAAE,CAAC,C,CAC3B,MAAOe,KAAK,CAAE,CACdR,OAAO,CAACI,WAAW,GAAGX,EAAE,CAAEe,KAAK,CAAC,C,CAEpC,CAAC,CACF,CAEDV,yBAAyB,CAAGJ,mBAAmB,CAACQ,WAAW,CACzDN,kCAAkC,CAClC,CAAC,CAAEH,EAAE,CAAEF,YAAY,CAAE,GACnBS,OAAO,CAACI,WAAW,GAAGX,EAAE,CAAE,GAAI,CAAAL,wBAAwB,CAACK,EAAE,CAAEF,YAAY,CAAC,CAAC,CAC5E,C,CAEL","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}