{"ast":null,"code":"import{computeNextBackoffInterval}from'@ide/backoff';import*as Application from'expo-application';import{CodedError,Platform,UnavailabilityError}from'expo-modules-core';import ServerRegistrationModule from'../ServerRegistrationModule';const updateDevicePushTokenUrl='https://exp.host/--/api/v2/push/updateDeviceToken';export async function updateDevicePushTokenAsync(signal,token){const doUpdateDevicePushTokenAsync=async retry=>{const[development,deviceId]=await Promise.all([shouldUseDevelopmentNotificationService(),getDeviceIdAsync()]);const body={deviceId:deviceId.toLowerCase(),development,deviceToken:token.data,appId:Application.applicationId,type:getTypeOfToken(token)};try{const response=await fetch(updateDevicePushTokenUrl,{method:'POST',headers:{'content-type':'application/json'},body:JSON.stringify(body),signal});if(!response.ok){console.debug('[expo-notifications] Error encountered while updating the device push token with the server:',await response.text());}if(!response.ok){retry();}}catch(e){if(e.name==='AbortError'){return;}console.warn('[expo-notifications] Error thrown while updating the device push token with the server:',e);retry();}};let shouldTry=true;const retry=()=>{shouldTry=true;};let retriesCount=0;const initialBackoff=500;const backoffOptions={maxBackoff:2*60*1000};let nextBackoffInterval=computeNextBackoffInterval(initialBackoff,retriesCount,backoffOptions);while(shouldTry&&!signal.aborted){shouldTry=false;await doUpdateDevicePushTokenAsync(retry);if(shouldTry&&!signal.aborted){nextBackoffInterval=computeNextBackoffInterval(initialBackoff,retriesCount,backoffOptions);retriesCount+=1;await new Promise(resolve=>setTimeout(resolve,nextBackoffInterval));}}}async function getDeviceIdAsync(){try{if(!ServerRegistrationModule.getInstallationIdAsync){throw new UnavailabilityError('ExpoServerRegistrationModule','getInstallationIdAsync');}return await ServerRegistrationModule.getInstallationIdAsync();}catch(e){throw new CodedError('ERR_NOTIFICATIONS_DEVICE_ID',`Could not fetch the installation ID of the application: ${e}.`);}}function getTypeOfToken(devicePushToken){switch(devicePushToken.type){case'ios':return'apns';case'android':return'fcm';default:return devicePushToken.type;}}async function shouldUseDevelopmentNotificationService(){if(false){try{const notificationServiceEnvironment=await Application.getIosPushNotificationServiceEnvironmentAsync();if(notificationServiceEnvironment==='development'){return true;}}catch{}}return false;}","map":{"version":3,"names":["computeNextBackoffInterval","Application","CodedError","Platform","UnavailabilityError","ServerRegistrationModule","updateDevicePushTokenUrl","updateDevicePushTokenAsync","signal","token","doUpdateDevicePushTokenAsync","retry","development","deviceId","Promise","all","shouldUseDevelopmentNotificationService","getDeviceIdAsync","body","toLowerCase","deviceToken","data","appId","applicationId","type","getTypeOfToken","response","fetch","method","headers","JSON","stringify","ok","console","debug","text","e","name","warn","shouldTry","retriesCount","initialBackoff","backoffOptions","maxBackoff","nextBackoffInterval","aborted","resolve","setTimeout","getInstallationIdAsync","devicePushToken","notificationServiceEnvironment","getIosPushNotificationServiceEnvironmentAsync"],"sources":["/Users/adhithyasobhanan/MY FINIX-APP/FRONTEND/node_modules/expo-notifications/src/utils/updateDevicePushTokenAsync.ts"],"sourcesContent":["import { computeNextBackoffInterval } from '@ide/backoff';\nimport * as Application from 'expo-application';\nimport { CodedError, Platform, UnavailabilityError } from 'expo-modules-core';\n\nimport ServerRegistrationModule from '../ServerRegistrationModule';\nimport { DevicePushToken } from '../Tokens.types';\n\nconst updateDevicePushTokenUrl = 'https://exp.host/--/api/v2/push/updateDeviceToken';\n\nexport async function updateDevicePushTokenAsync(signal: AbortSignal, token: DevicePushToken) {\n  const doUpdateDevicePushTokenAsync = async (retry: () => void) => {\n    const [development, deviceId] = await Promise.all([\n      shouldUseDevelopmentNotificationService(),\n      getDeviceIdAsync(),\n    ]);\n    const body = {\n      deviceId: deviceId.toLowerCase(),\n      development,\n      deviceToken: token.data,\n      appId: Application.applicationId,\n      type: getTypeOfToken(token),\n    };\n\n    try {\n      const response = await fetch(updateDevicePushTokenUrl, {\n        method: 'POST',\n        headers: {\n          'content-type': 'application/json',\n        },\n        body: JSON.stringify(body),\n        signal,\n      });\n\n      // Help debug erroring servers\n      if (!response.ok) {\n        console.debug(\n          '[expo-notifications] Error encountered while updating the device push token with the server:',\n          await response.text()\n        );\n      }\n\n      // Retry if request failed\n      if (!response.ok) {\n        retry();\n      }\n    } catch (e) {\n      // Error returned if the request is aborted should be an 'AbortError'. In\n      // React Native fetch is polyfilled using `whatwg-fetch` which:\n      // - creates `AbortError`s like this\n      //   https://github.com/github/fetch/blob/75d9455d380f365701151f3ac85c5bda4bbbde76/fetch.js#L505\n      // - which creates exceptions like\n      //   https://github.com/github/fetch/blob/75d9455d380f365701151f3ac85c5bda4bbbde76/fetch.js#L490-L494\n      if (e.name === 'AbortError') {\n        // We don't consider AbortError a failure, it's a sign somewhere else the\n        // request is expected to succeed and we don't need this one, so let's\n        // just return.\n        return;\n      }\n\n      console.warn(\n        '[expo-notifications] Error thrown while updating the device push token with the server:',\n        e\n      );\n\n      retry();\n    }\n  };\n\n  let shouldTry = true;\n  const retry = () => {\n    shouldTry = true;\n  };\n\n  let retriesCount = 0;\n  const initialBackoff = 500; // 0.5 s\n  const backoffOptions = {\n    maxBackoff: 2 * 60 * 1000, // 2 minutes\n  };\n  let nextBackoffInterval = computeNextBackoffInterval(\n    initialBackoff,\n    retriesCount,\n    backoffOptions\n  );\n\n  while (shouldTry && !signal.aborted) {\n    // Will be set to true by `retry` if it's called\n    shouldTry = false;\n    await doUpdateDevicePushTokenAsync(retry);\n\n    // Do not wait if we won't retry\n    if (shouldTry && !signal.aborted) {\n      nextBackoffInterval = computeNextBackoffInterval(\n        initialBackoff,\n        retriesCount,\n        backoffOptions\n      );\n      retriesCount += 1;\n      await new Promise((resolve) => setTimeout(resolve, nextBackoffInterval));\n    }\n  }\n}\n\n// Same as in getExpoPushTokenAsync\nasync function getDeviceIdAsync() {\n  try {\n    if (!ServerRegistrationModule.getInstallationIdAsync) {\n      throw new UnavailabilityError('ExpoServerRegistrationModule', 'getInstallationIdAsync');\n    }\n\n    return await ServerRegistrationModule.getInstallationIdAsync();\n  } catch (e) {\n    throw new CodedError(\n      'ERR_NOTIFICATIONS_DEVICE_ID',\n      `Could not fetch the installation ID of the application: ${e}.`\n    );\n  }\n}\n\n// Same as in getExpoPushTokenAsync\nfunction getTypeOfToken(devicePushToken: DevicePushToken) {\n  switch (devicePushToken.type) {\n    case 'ios':\n      return 'apns';\n    case 'android':\n      return 'fcm';\n    // This probably will error on server, but let's make this function future-safe.\n    default:\n      return devicePushToken.type;\n  }\n}\n\n// Same as in getExpoPushTokenAsync\nasync function shouldUseDevelopmentNotificationService() {\n  if (Platform.OS === 'ios') {\n    try {\n      const notificationServiceEnvironment =\n        await Application.getIosPushNotificationServiceEnvironmentAsync();\n      if (notificationServiceEnvironment === 'development') {\n        return true;\n      }\n    } catch {\n      // We can't do anything here, we'll fallback to false then.\n    }\n  }\n\n  return false;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}