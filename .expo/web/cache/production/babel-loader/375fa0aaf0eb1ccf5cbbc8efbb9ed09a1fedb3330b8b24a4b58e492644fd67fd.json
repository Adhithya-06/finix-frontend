{"ast":null,"code":"import{LegacyEventEmitter,UnavailabilityError}from'expo-modules-core';import NotificationsEmitterModule from'./NotificationsEmitterModule';import{mapNotification,mapNotificationResponse}from'./utils/mapNotificationResponse';const emitter=new LegacyEventEmitter(NotificationsEmitterModule);const didReceiveNotificationEventName='onDidReceiveNotification';const didDropNotificationsEventName='onNotificationsDeleted';const didReceiveNotificationResponseEventName='onDidReceiveNotificationResponse';const didClearNotificationResponseEventName='onDidClearNotificationResponse';export const DEFAULT_ACTION_IDENTIFIER='expo.modules.notifications.actions.DEFAULT';export function addNotificationReceivedListener(listener){return emitter.addListener(didReceiveNotificationEventName,notification=>{const mappedNotification=mapNotification(notification);listener(mappedNotification);});}export function addNotificationsDroppedListener(listener){return emitter.addListener(didDropNotificationsEventName,listener);}export function addNotificationResponseReceivedListener(listener){return emitter.addListener(didReceiveNotificationResponseEventName,response=>{const mappedResponse=mapNotificationResponse(response);listener(mappedResponse);});}export function removeNotificationSubscription(subscription){if(typeof subscription?.remove==='function'){subscription.remove();}else{throw new Error(`removeNotificationSubscription: Provided value is not a subscription: ${subscription}`);}}export async function getLastNotificationResponseAsync(){if(!NotificationsEmitterModule.getLastNotificationResponseAsync){throw new UnavailabilityError('ExpoNotifications','getLastNotificationResponseAsync');}const response=await NotificationsEmitterModule.getLastNotificationResponseAsync();const mappedResponse=response?mapNotificationResponse(response):response;return mappedResponse;}export async function clearLastNotificationResponseAsync(){if(!NotificationsEmitterModule.clearLastNotificationResponseAsync){throw new UnavailabilityError('ExpoNotifications','getLastNotificationResponseAsync');}await NotificationsEmitterModule.clearLastNotificationResponseAsync();emitter.emit(didClearNotificationResponseEventName,[]);}export function addNotificationResponseClearedListener(listener){return emitter.addListener(didClearNotificationResponseEventName,listener);}","map":{"version":3,"names":["LegacyEventEmitter","UnavailabilityError","NotificationsEmitterModule","mapNotification","mapNotificationResponse","emitter","didReceiveNotificationEventName","didDropNotificationsEventName","didReceiveNotificationResponseEventName","didClearNotificationResponseEventName","DEFAULT_ACTION_IDENTIFIER","addNotificationReceivedListener","listener","addListener","notification","mappedNotification","addNotificationsDroppedListener","addNotificationResponseReceivedListener","response","mappedResponse","removeNotificationSubscription","subscription","remove","Error","getLastNotificationResponseAsync","clearLastNotificationResponseAsync","emit","addNotificationResponseClearedListener"],"sources":["/Users/adhithyasobhanan/MY FINIX-APP/FRONTEND/node_modules/expo-notifications/src/NotificationsEmitter.ts"],"sourcesContent":["import { LegacyEventEmitter, type EventSubscription, UnavailabilityError } from 'expo-modules-core';\n\nimport { Notification, NotificationResponse } from './Notifications.types';\nimport NotificationsEmitterModule from './NotificationsEmitterModule';\nimport { mapNotification, mapNotificationResponse } from './utils/mapNotificationResponse';\n\n// Web uses SyntheticEventEmitter\nconst emitter = new LegacyEventEmitter(NotificationsEmitterModule);\n\nconst didReceiveNotificationEventName = 'onDidReceiveNotification';\nconst didDropNotificationsEventName = 'onNotificationsDeleted';\nconst didReceiveNotificationResponseEventName = 'onDidReceiveNotificationResponse';\nconst didClearNotificationResponseEventName = 'onDidClearNotificationResponse';\n\n// @docsMissing\nexport const DEFAULT_ACTION_IDENTIFIER = 'expo.modules.notifications.actions.DEFAULT';\n\n/**\n * Listeners registered by this method will be called whenever a notification is received while the app is running.\n * @param listener A function accepting a notification ([`Notification`](#notification)) as an argument.\n * @return An [`EventSubscription`](#eventsubscription) object represents the subscription of the provided listener.\n * @example Registering a notification listener using a React hook:\n * ```jsx\n * import React from 'react';\n * import * as Notifications from 'expo-notifications';\n *\n * export default function App() {\n *   React.useEffect(() => {\n *     const subscription = Notifications.addNotificationReceivedListener(notification => {\n *       console.log(notification);\n *     });\n *     return () => subscription.remove();\n *   }, []);\n *\n *   return (\n *     // Your app content\n *   );\n * }\n * ```\n * @header listen\n */\nexport function addNotificationReceivedListener(\n  listener: (event: Notification) => void\n): EventSubscription {\n  return emitter.addListener<Notification>(\n    didReceiveNotificationEventName,\n    (notification: Notification) => {\n      const mappedNotification = mapNotification(notification);\n      listener(mappedNotification);\n    }\n  );\n}\n\n/**\n * Listeners registered by this method will be called whenever some notifications have been dropped by the server.\n * Applicable only to Firebase Cloud Messaging which we use as a notifications service on Android. It corresponds to `onDeletedMessages()` callback.\n * More information can be found in [Firebase docs](https://firebase.google.com/docs/cloud-messaging/android/receive#override-ondeletedmessages).\n * @param listener A callback function.\n * @return An [`EventSubscription`](#eventsubscription) object represents the subscription of the provided listener.\n * @header listen\n */\nexport function addNotificationsDroppedListener(listener: () => void): EventSubscription {\n  return emitter.addListener<void>(didDropNotificationsEventName, listener);\n}\n\n/**\n * Listeners registered by this method will be called whenever a user interacts with a notification (for example, taps on it).\n * @param listener A function accepting notification response ([`NotificationResponse`](#notificationresponse)) as an argument.\n * @return An [`EventSubscription`](#eventsubscription) object represents the subscription of the provided listener.\n * @example Register a notification responder listener:\n * ```jsx\n * import React from 'react';\n * import { Linking } from 'react-native';\n * import * as Notifications from 'expo-notifications';\n *\n * export default function Container() {\n *   React.useEffect(() => {\n *     const subscription = Notifications.addNotificationResponseReceivedListener(response => {\n *       const url = response.notification.request.content.data.url;\n *       Linking.openURL(url);\n *     });\n *     return () => subscription.remove();\n *   }, []);\n *\n *   return (\n *     // Your app content\n *   );\n * }\n * ```\n * @header listen\n */\nexport function addNotificationResponseReceivedListener(\n  listener: (event: NotificationResponse) => void\n): EventSubscription {\n  return emitter.addListener<NotificationResponse>(\n    didReceiveNotificationResponseEventName,\n    (response: NotificationResponse) => {\n      const mappedResponse = mapNotificationResponse(response);\n      listener(mappedResponse);\n    }\n  );\n}\n\n/**\n * Removes a notification subscription returned by an `addNotificationListener` call.\n * @param subscription A subscription returned by `addNotificationListener` method.\n * @header listen\n */\nexport function removeNotificationSubscription(subscription: EventSubscription) {\n  if (typeof subscription?.remove === 'function') {\n    subscription.remove();\n  } else {\n    throw new Error(\n      `removeNotificationSubscription: Provided value is not a subscription: ${subscription}`\n    );\n  }\n}\n\n/**\n * Gets the notification response that was received most recently\n * (a notification response designates an interaction with a notification, such as tapping on it).\n *\n * - `null` - if no notification response has been received yet\n * - a [`NotificationResponse`](#notificationresponse) object - if a notification response was received\n */\nexport async function getLastNotificationResponseAsync(): Promise<NotificationResponse | null> {\n  if (!NotificationsEmitterModule.getLastNotificationResponseAsync) {\n    throw new UnavailabilityError('ExpoNotifications', 'getLastNotificationResponseAsync');\n  }\n  const response = await NotificationsEmitterModule.getLastNotificationResponseAsync();\n  const mappedResponse = response ? mapNotificationResponse(response) : response;\n  return mappedResponse;\n}\n\n/**\n * Clears the notification response that was received most recently. May be used\n * when an app selects a route based on the notification response, and it is undesirable\n * to continue selecting the route after the response has already been handled.\n *\n * If a component is using the [`useLastNotificationResponse`](#uselastnotificationresponse) hook,\n * this call will also clear the value returned by the hook.\n *\n * @return A promise that resolves if the native call was successful.\n */\nexport async function clearLastNotificationResponseAsync(): Promise<void> {\n  if (!NotificationsEmitterModule.clearLastNotificationResponseAsync) {\n    throw new UnavailabilityError('ExpoNotifications', 'getLastNotificationResponseAsync');\n  }\n  await NotificationsEmitterModule.clearLastNotificationResponseAsync();\n  // Emit event to clear any useLastNotificationResponse hooks, after native call succeeds\n  emitter.emit(didClearNotificationResponseEventName, []);\n}\n\n/**\n * @hidden\n */\nexport function addNotificationResponseClearedListener(listener: () => void): EventSubscription {\n  return emitter.addListener<void>(didClearNotificationResponseEventName, listener);\n}\n"],"mappings":"AAAA,OAASA,kBAAkB,CAA0BC,mBAAmB,KAAQ,mBAAmB,CAGnG,MAAO,CAAAC,0BAA0B,KAAM,8BAA8B,CACrE,OAASC,eAAe,CAAEC,uBAAuB,KAAQ,iCAAiC,CAG1F,KAAM,CAAAC,OAAO,CAAG,GAAI,CAAAL,kBAAkB,CAACE,0BAA0B,CAAC,CAElE,KAAM,CAAAI,+BAA+B,CAAG,0BAA0B,CAClE,KAAM,CAAAC,6BAA6B,CAAG,wBAAwB,CAC9D,KAAM,CAAAC,uCAAuC,CAAG,kCAAkC,CAClF,KAAM,CAAAC,qCAAqC,CAAG,gCAAgC,CAG9E,MAAO,MAAM,CAAAC,yBAAyB,CAAG,4CAA4C,CA0BrF,MAAM,SAAU,CAAAC,+BAA+BA,CAC7CC,QAAuC,EAEvC,MAAO,CAAAP,OAAO,CAACQ,WAAW,CACxBP,+BAA+B,CAC9BQ,YAA0B,EAAI,CAC7B,KAAM,CAAAC,kBAAkB,CAAGZ,eAAe,CAACW,YAAY,CAAC,CACxDF,QAAQ,CAACG,kBAAkB,CAAC,CAC9B,CAAC,CACF,CACH,CAUA,MAAM,SAAU,CAAAC,+BAA+BA,CAACJ,QAAoB,EAClE,MAAO,CAAAP,OAAO,CAACQ,WAAW,CAAON,6BAA6B,CAAEK,QAAQ,CAAC,CAC3E,CA4BA,MAAM,SAAU,CAAAK,uCAAuCA,CACrDL,QAA+C,EAE/C,MAAO,CAAAP,OAAO,CAACQ,WAAW,CACxBL,uCAAuC,CACtCU,QAA8B,EAAI,CACjC,KAAM,CAAAC,cAAc,CAAGf,uBAAuB,CAACc,QAAQ,CAAC,CACxDN,QAAQ,CAACO,cAAc,CAAC,CAC1B,CAAC,CACF,CACH,CAOA,MAAM,SAAU,CAAAC,8BAA8BA,CAACC,YAA+B,EAC5E,GAAI,MAAO,CAAAA,YAAY,EAAEC,MAAM,GAAK,UAAU,CAAE,CAC9CD,YAAY,CAACC,MAAM,EAAE,C,CACtB,IAAM,CACL,KAAM,IAAI,CAAAC,KAAK,CACb,yEAAyEF,YAAY,EAAE,CACxF,C,CAEL,CASA,MAAO,eAAe,CAAAG,gCAAgCA,CAAA,EACpD,GAAI,CAACtB,0BAA0B,CAACsB,gCAAgC,CAAE,CAChE,KAAM,IAAI,CAAAvB,mBAAmB,CAAC,mBAAmB,CAAE,kCAAkC,CAAC,C,CAExF,KAAM,CAAAiB,QAAQ,CAAG,KAAM,CAAAhB,0BAA0B,CAACsB,gCAAgC,EAAE,CACpF,KAAM,CAAAL,cAAc,CAAGD,QAAQ,CAAGd,uBAAuB,CAACc,QAAQ,CAAC,CAAGA,QAAQ,CAC9E,MAAO,CAAAC,cAAc,CACvB,CAYA,MAAO,eAAe,CAAAM,kCAAkCA,CAAA,EACtD,GAAI,CAACvB,0BAA0B,CAACuB,kCAAkC,CAAE,CAClE,KAAM,IAAI,CAAAxB,mBAAmB,CAAC,mBAAmB,CAAE,kCAAkC,CAAC,C,CAExF,KAAM,CAAAC,0BAA0B,CAACuB,kCAAkC,EAAE,CAErEpB,OAAO,CAACqB,IAAI,CAACjB,qCAAqC,CAAE,EAAE,CAAC,CACzD,CAKA,MAAM,SAAU,CAAAkB,sCAAsCA,CAACf,QAAoB,EACzE,MAAO,CAAAP,OAAO,CAACQ,WAAW,CAAOJ,qCAAqC,CAAEG,QAAQ,CAAC,CACnF","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}